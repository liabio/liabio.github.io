<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mysql on 小碗汤的博客</title>
    <link>https://liabio.github.io/categories/mysql/</link>
    <description>Recent content in mysql on 小碗汤的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 21 Aug 2019 17:51:26 +0800</lastBuildDate>
    
	<atom:link href="https://liabio.github.io/categories/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>利用procedure批量插入数据</title>
      <link>https://liabio.github.io/posts/2019-08-21-%E5%88%A9%E7%94%A8procedure%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Wed, 21 Aug 2019 17:51:26 +0800</pubDate>
      
      <guid>https://liabio.github.io/posts/2019-08-21-%E5%88%A9%E7%94%A8procedure%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/</guid>
      <description>&amp;emsp;&amp;emsp;要求在页面查询到5000条数据，为了方便插入，准备用shell脚本写curl命令调用自己写的代码接口，但是速度慢，而且写的时候遇到点儿小问题，故用sql语句写了这个功能 &amp;emsp;&amp;emsp;由于operationl</description>
    </item>
    
    <item>
      <title>存储过程procedure和函数Function的区别</title>
      <link>https://liabio.github.io/posts/2019-07-21-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8Bprocedure%E5%92%8C%E5%87%BD%E6%95%B0Function%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 21 Jul 2019 17:51:13 +0800</pubDate>
      
      <guid>https://liabio.github.io/posts/2019-07-21-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8Bprocedure%E5%92%8C%E5%87%BD%E6%95%B0Function%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>1、返回值的区别 函数有1个返回值,而存储过程是通过参数返回的,可以有多个或者没有 2. 调用的区别,函数可以在查询语句中直接调用,而存储过程必须单独调用. 函数：一般情况下是用来计算并返回一个计算结果； 存储过程： 一般是用来完成特定的数据操作（比如修</description>
    </item>
    
    <item>
      <title>MySql镜像安装</title>
      <link>https://liabio.github.io/posts/2019-04-20-MySql%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sat, 20 Apr 2019 17:50:04 +0800</pubDate>
      
      <guid>https://liabio.github.io/posts/2019-04-20-MySql%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85/</guid>
      <description>安装MySql镜像 &amp;gt; docker search mysql #查找MySql镜像版本 &amp;gt; docker pull mysql:tag #安装指定版本的mysql镜像，tag为版本号 例如： &amp;gt; docker pull mysql:5.6 #安装MySql 5.6版本镜像 启动MySql容器 &amp;gt; docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag 例如： &amp;gt; docker run --name test-mysql -e MYSQL_ROOT_PASSWORD=123456 -d -p 3306:3306 mysql:5.6 #启动mysql 5.6版本镜</description>
    </item>
    
    <item>
      <title>Mysql大小写敏感与校对规则</title>
      <link>https://liabio.github.io/posts/2019-01-08-mysql%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E4%B8%8E%E6%A0%A1%E5%AF%B9%E8%A7%84%E5%88%99/</link>
      <pubDate>Tue, 08 Jan 2019 17:46:39 +0800</pubDate>
      
      <guid>https://liabio.github.io/posts/2019-01-08-mysql%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E4%B8%8E%E6%A0%A1%E5%AF%B9%E8%A7%84%E5%88%99/</guid>
      <description>大家在使用mysql过程中，可能会遇到类似以下的问题： 模糊匹配 jg%，结果以JG开头的字符串也出现在结果集中，大家很自然的认为是大小写敏感的问题。那么mysql中大小写敏感是如何控制的；数据库名，表名，字段名这些字典对象以及字段值的大小敏感</description>
    </item>
    
    <item>
      <title>Mysql支持原生json使用说明</title>
      <link>https://liabio.github.io/posts/2018-12-24-mysql%E6%94%AF%E6%8C%81%E5%8E%9F%E7%94%9Fjson%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Mon, 24 Dec 2018 17:28:07 +0800</pubDate>
      
      <guid>https://liabio.github.io/posts/2018-12-24-mysql%E6%94%AF%E6%8C%81%E5%8E%9F%E7%94%9Fjson%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid>
      <description>MySQL在5.7.8开始对json原生支持，本文将对MySQL中json类型的用法简单说明，希望对你有用。 CREATE TABLE testproject ( `id` int(10) unsigned NOT NULL AUTO_INCREMENT, `skill` JSON NOT NULL, `student` JSON NOT NULL, PRIMARY KEY (`id`) ); 查看表结构： 这样JSON的字段就被创建好了 注：JSON类型不能有默认值。 插入JSON 插入</description>
    </item>
    
    <item>
      <title>Mysql数据导出golang实现</title>
      <link>https://liabio.github.io/posts/2018-12-21-mysql%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BAgolang%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 21 Dec 2018 17:21:38 +0800</pubDate>
      
      <guid>https://liabio.github.io/posts/2018-12-21-mysql%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BAgolang%E5%AE%9E%E7%8E%B0/</guid>
      <description>mysql数据导出为excel文件，golang实现： 首先下载依赖到的三方库： Simple install the package to your $GOPATH with the go tool from shell: $ go get -u github.com/go-sql-driver/mysql 具体说明请看： 库地址 wiki说明 代码示例如下，用到了go的flag包的能力，传入命令行参数。具体看helpInfo： Usage of mysqldataexport: -port int</description>
    </item>
    
  </channel>
</rss>